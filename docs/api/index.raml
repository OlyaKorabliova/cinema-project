#%RAML 1.0
---
title: Cinema Project
version: v1
baseUri: https://localhost:5000/

types:
 movie: !include movie.schema
 actor: !include actor.schema

resourceTypes:
  readOnlyCollection:
    description: Collection of available <<resourcePathName>> in Cinema Project.
    get:
      description: Get a list of <<resourcePathName>>.
      responses:
        200:
          body:
            application/json:
              example: |
                <<exampleCollection>>
  collection:
    description: Collection of available <<resourcePathName>> in Cinema Project.
    get:
      description: Get a list of <<resourcePathName>>.
      responses:
        200:
          body:
            application/json:
              example: |
                <<exampleCollection>>
    post:
      description: |
        Add a new <<resourcePathName|!singularize>> to Cinema Project.
      queryParameters:
        access_token:
          description: "The access token provided by the authentication application"
          example: AABBCCDD
          required: true
          type: string
      body:
        application/json:
          type: <<resourcePathName|!singularize>>
            example: |
              <<exampleItem>>
      responses:
        200:
          body:
            application/json:
              example: |
                { "message": "The <<resourcePathName|!singularize>> has been properly entered" }
  collection-item:
    description: Entity representing a <<resourcePathName|!singularize>>
    get:
      description: |
        Get the <<resourcePathName|!singularize>>
        with <<resourcePathName|!singularize>>Id =
        {<<resourcePathName|!singularize>>Id}
      responses:
        200:
          body:
            application/json:
              example: |
                <<exampleItem>>
        404:
          body:
            application/json:
              example: |
                {"message": "<<resourcePathName|!singularize>> not found" }

    patch:
      description: |
        Update information about some <<resourcePathName|!singularize>>.
      queryParameters:
        access_token:
          example: <<examplePatch>>
          required: true
          type: Object
      responses:
        200:
          body:
            application/json:
              example: |
                <<exampleItem>>
        404:
          body:
            application/json:
              example: |
                {"message": "<<resourcePathName|!singularize>> not found" }
traits:
  searchable:
    queryParameters:
      query:
        description: |
          JSON array [{"field1","value1","operator1"},{"field2","value2","operator2"},...,{"fieldN","valueN","operatorN"}] <<description>>
        example: |
          <<example>>
  orderable:
    queryParameters:
      orderBy:
        description: |
          Order by field: <<fieldsList>>
        type: string
        required: false
      order:
        description: Order
        enum: [desc, asc]
        default: desc
        required: false

/movies:
  type:
    collection:
      exampleCollection: !include movies.sample
      exampleItem: !include movie-new.sample
  get:
    description: All movies
    is: [
          searchable: {description: "with valid searchable fields: movieTitle", example: "[\"movieTitle\", \"Get L\", \"like\"]"},
          orderable: {fieldsList: "movieTitle"}
        ]
  post:
    description: Add a new movie
    body:
      application/json:
      multipart/form-data:
        properties:
          file:
            description: The file to be uploaded
            required: true
            type: file

  /{bySlugName}/{movieSlugName}:
    type:
      collection-item:
        exampleItem: !include movie-retrieve.sample
        examplePatch: !include movie-patch.sample
    get:
      description: Get a specific movie
    patch:
      description: Update the movie
    delete:
      description: Delete a specific movie
  /{movieSlugs}:
    type:
      collection:
        exampleCollection: !include movie-slugs.sample
    get:
      description: Get slugs of all movies


/actors:
  type:
    collection:
      exampleCollection: !include actors.sample
      exampleItem: !include actor-new.sample
  get:
    description: All actors
  post:
    description: Add a new actor
    body:
      application/json:
      multipart/form-data:
        properties:
          file:
            description: The file to be uploaded
            required: true
            type: file

  /{bySlugName}/{actorSlugName}:
    type:
      collection-item:
        exampleItem: !include actor-retrieve.sample
        examplePatch: !include actor-patch.sample
    get:
      description: Get a specific actor
    patch:
      description: Update the actor
    delete:
      description: Delete a specific actor
  /{actorSlugs}:
    type:
      collection:
        exampleCollection: !include actor-slugs.sample
    get:
      description: Get slugs of all actors